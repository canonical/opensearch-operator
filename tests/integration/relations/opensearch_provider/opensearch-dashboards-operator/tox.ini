# Copyright 2023 Canonical Ltd.
# See LICENSE file for licensing details.

[tox]
no_package = True
env_list = lint, unit

[vars]
application = opensearch_dashboards 
src_path = {tox_root}/src
tests_path = {tox_root}/tests
all_path = {[vars]src_path} {[vars]tests_path}

[testenv]
allowlist_externals =
    /bin/bash
    poetry
set_env =
    PYTHONPATH = {[vars]src_path}:{tox_root}/lib
    PY_COLORS = 1
pass_env =
    poetry

[testenv:build-{production,dev,wrapper}]
# Wrap `charmcraft pack`
pass_env =
    CI
allowlist_externals =
    {[testenv]allowlist_externals}
    charmcraft
    charmcraftcache
    mv
commands_pre =
    # TODO charm versioning: Remove
    # Workaround to add unique identifier (git hash) to charm version while specification
    # DA053 - Charm versioning
    # (https://docs.google.com/document/d/1Jv1jhWLl8ejK3iJn7Q3VbCIM9GIhp8926bgXpdtx-Sg/edit?pli=1)
    # is pending review.
    python -c 'import pathlib; import shutil; import subprocess; git_hash=subprocess.run(["git", "describe", "--always", "--dirty"], capture_output=True, check=True, encoding="utf-8").stdout; file = pathlib.Path("charm_version"); shutil.copy(file, pathlib.Path("charm_version.backup")); version = file.read_text().strip(); file.write_text(f"{version}+{git_hash}")'

    poetry export --only main,charm-libs --without-hashes --output requirements.txt
commands =
    build-production: charmcraft pack {posargs}
    build-dev: charmcraftcache pack {posargs}
commands_post =
    mv requirements.txt requirements-last-build.txt
    mv charm_version.backup charm_version

[testenv:format]
description = Apply coding style standards to code
commands_pre =
    poetry lock --no-update
    poetry install --only fmt
commands =
    ; poetry config warnings.export false
    poetry run isort {[vars]all_path}
    ; poetry export -f requirements.txt -o requirements.txt --without-hashes

    poetry run black {[vars]all_path}
    ; poetry run ruff --fix {[vars]all_path}

[testenv:lint]
description = Check code against coding style standards
commands_pre =
    poetry install --only lint
commands =
    poetry check --lock
    poetry run codespell {[vars]all_path}
    poetry run black --check --diff {[vars]all_path}

    poetry run pyright

[testenv:unit]
description = Run unit tests
commands_pre =
    poetry install --only main,charm-libs,unit
commands =
    poetry install --no-root --with unit
    poetry run coverage run --source={[vars]src_path} \
        -m pytest -v --tb native -s {posargs} {[vars]tests_path}/unit
    poetry run coverage report

[testenv:integration]
description = Run all integration tests
set_env =
    {[testenv]set_env}
    # Workaround for https://github.com/python-poetry/poetry/issues/6958
    POETRY_INSTALLER_PARALLEL = false
pass_env =
    CI
    GITHUB_OUTPUT
allowlist_externals =
    {[testenv:build-wrapper]allowlist_externals}
commands_pre =
    poetry install --only integration
    {[testenv:build-wrapper]commands_pre}
commands =
    poetry run pytest -vv --tb native --log-cli-level=INFO --ignore={[vars]tests_path}/unit/ {posargs} 
commands_post =
    {[testenv:build-wrapper]commands_post}
