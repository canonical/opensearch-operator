# Copyright 2023 Canonical Ltd.
# See LICENSE file for licensing details.
on:
  workflow_call:
    inputs:
      juju-snap-channel:
        description: Snap channel for Juju CLI
        default: 3.1/stable
        type: string
      libjuju-version-specifier:
        description: |
            python-libjuju version specifier (e.g. ">=1.3")
            https://packaging.python.org/en/latest/glossary/#term-Version-Specifier
        required: false
        type: string

jobs:
  build:
    name: Build charms
    uses: canonical/data-platform-workflows/.github/workflows/build_charms_with_cache.yaml@v2

  integration-test:
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        tox-environments:
          - charm-integration
          - tls-integration
          - client-integration
          - ha-base-integration
          - ha-networking-integration
          - ha-multi-clusters-integration
          - large-deployments-integration
          - plugins-integration
        runner: ["ubuntu-22.04"]
        include:
          - tox-environments: h-scaling-integration
            runner: "Ubuntu_4C_16G"
    name: ${{ matrix.tox-environments }}
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 360
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Upgrade LXD
        run: |
          sudo snap refresh lxd --channel=latest/stable

      - name: Setup Juju environment
        # Runs on juju 3 by default
        # TODO: Replace with custom image on self-hosted runner
        uses: charmed-kubernetes/actions-operator@main
        with:
          provider: lxd
          juju-channel: ${{ inputs.juju-snap-channel }}

      - name: Download packed charm(s)
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build.outputs.artifact-name }}

      - name: Select tests
        id: select-tests
        run: |
          if [ "${{ github.event_name }}" == "schedule" ]
          then
            echo Running unstable and stable tests
            echo "mark_expression=" >> $GITHUB_OUTPUT
          else
            echo Skipping unstable tests
            echo "mark_expression=not unstable" >> $GITHUB_OUTPUT
          fi

      - name: Run integration tests
        run: |
          # free space in the runner
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

          # Set kernel params for OpenSearch
          sudo sysctl -w vm.max_map_count=262144 vm.swappiness=0 net.ipv4.tcp_retries2=5
          # Set kernel params for testing
          sudo sysctl -w net.ipv6.conf.all.disable_ipv6=1 net.ipv6.conf.default.disable_ipv6=1 net.ipv6.conf.all.autoconf=0
          tox run -e ${{ matrix.tox-environments }} -- -m '${{ steps.select-tests.outputs.mark_expression }}'
        env:
          CI_PACKED_CHARMS: ${{ needs.build.outputs.charms }}
          LIBJUJU_VERSION_SPECIFIER: ${{ inputs.libjuju-version-specifier }}



  backup-microceph-integration-test:
    needs:
      - build
    name: backup-integration-test
    runs-on: "ubuntu-22.04"
    timeout-minutes: 360
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Upgrade LXD
        run: |
          sudo snap refresh lxd --channel=latest/stable

      - name: Setup Juju environment
        # Runs on juju 3 by default
        # TODO: Replace with custom image on self-hosted runner
        uses: charmed-kubernetes/actions-operator@main
        with:
          provider: lxd
          juju-channel: ${{ inputs.juju-snap-channel }}

      - name: Download packed charm(s)
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build.outputs.artifact-name }}

      - name: Free space in the runner
        id: free-space-runner
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

      - name: Setup microceph
        uses: phvalguima/microceph-action@main
        with:
          channel: 'latest/edge'
          devname: '/dev/sdi'
          accesskey: 'accesskey'
          secretkey: 'secretkey'
          bucket: 'testbucket'
          osdsize: '5G'

      - name: Select tests
        id: select-tests
        run: |
          if [ "${{ github.event_name }}" == "schedule" ]
          then
            echo Running unstable and stable tests
            echo "mark_expression=" >> $GITHUB_OUTPUT
          else
            echo Skipping unstable tests
            echo "mark_expression=not unstable" >> $GITHUB_OUTPUT
          fi

      - name: Run backup test
        run: |
          # load microceph output
          # ATM: remove the https:// reference and stick with http only
          sed -i 's@https://@http://@g' microceph.source
          export "$(cat microceph.source)"
          export TEST_NUM_APP_UNITS=2

          # Set kernel params
          sudo sysctl -w vm.max_map_count=262144 vm.swappiness=0 net.ipv4.tcp_retries2=5
          tox run -e ha-backup-integration -- -m '${{ steps.select-tests.outputs.mark_expression }}'
        env:
          CI_PACKED_CHARMS: ${{ needs.build.outputs.charms }}
          LIBJUJU_VERSION_SPECIFIER: ${{ inputs.libjuju-version-specifier }}

#      - name: Run backup test with AWS
#        run: tox run -e ha-backup-integration -- -m '${{ steps.select-tests.outputs.mark_expression }}'
#        env:
#          CI_PACKED_CHARMS: ${{ needs.build.outputs.charms }}
#          LIBJUJU_VERSION_SPECIFIER: ${{ matrix.libjuju-version }}
#          SECRETS_FROM_GITHUB: |
#            {
#              "AWS_ACCESS_KEY": "${{ secrets.AWS_ACCESS_KEY }}",
#              "AWS_SECRET_KEY": "${{ secrets.AWS_SECRET_KEY }}",
#            }
#      - name: Run backup test with GCP
#        run: tox run -e ha-backup-integration -- -m '${{ steps.select-tests.outputs.mark_expression }}'
#        env:
#          CI_PACKED_CHARMS: ${{ needs.build.outputs.charms }}
#          LIBJUJU_VERSION_SPECIFIER: ${{ matrix.libjuju-version }}
#          SECRETS_FROM_GITHUB: |
#            {
#              "GCP_ACCESS_KEY": "${{ secrets.GCP_ACCESS_KEY }}",
#              "GCP_SECRET_KEY": "${{ secrets.GCP_SECRET_KEY }}",
#            }
