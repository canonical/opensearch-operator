# Copyright 2023 Canonical Ltd.
# See LICENSE file for licensing details.

[tox]
no_package = True
skip_missing_interpreters = True
env_list = format, lint, unit
labels =
    # Don't run this group in parallel, or with --keep-models because it creates a lot of local VMs.
    integration = {charm, tls, ha, ha-networking, ha-multi-clusters, large-deployments, client, h-scaling, ha-storage}-integration


[vars]
src_path = {tox_root}/src
tests_path = {tox_root}/tests
lib_path = {tox_root}/lib/charms/opensearch/v0
all_path = {[vars]src_path} {[vars]lib_path} {[vars]tests_path}

[testenv]
set_env =
    PYTHONPATH = {tox_root}:{tox_root}/lib:{[vars]src_path}
    PYTHONBREAKPOINT=ipdb.set_trace
    PY_COLORS=1
    LIBJUJU_VERSION_SPECIFIER={env:LIBJUJU_VERSION_SPECIFIER:==2.9.44}
pass_env =
    PYTHONPATH
    CHARM_BUILD_DIR
    MODEL_SETTINGS
    LIBJUJU_VERSION_SPECIFIER

[testenv:format]
description = Apply coding style standards to code
deps =
    black
    isort
commands =
    isort {[vars]all_path}
    black {[vars]all_path}

[testenv:lint]
description = Check code against coding style standards
pass_env =
    {[testenv]pass_env}
deps =
    black
    flake8
    flake8-docstrings
    flake8-copyright
    flake8-builtins
    pyproject-flake8
    pep8-naming
    isort
    codespell
commands =
    codespell {[vars]lib_path}
    codespell {tox_root} --skip {tox_root}/.git --skip {tox_root}/.tox \
      --skip {tox_root}/build --skip {tox_root}/lib --skip {tox_root}/venv \
      --skip {tox_root}/.mypy_cache --skip {tox_root}/icon.svg
    # pflake8 wrapper supports config from pyproject.toml
    pflake8 {[vars]all_path}
    isort --check-only --diff {[vars]all_path}
    black --check --diff {[vars]all_path}

[testenv:unit]
description = Run unit tests
deps =
    pytest
    pytest-asyncio
    coverage[toml]
    -r {tox_root}/requirements.txt
commands =
    coverage run --source={[vars]src_path} --source={[vars]lib_path} \
        -m pytest -v --tb native -s {posargs} {[vars]tests_path}/unit
    coverage report

[testenv:{charm, tls, client, ha-base, h-scaling, ha-storage, ha-networking, ha-multi-clusters, large-deployments, plugins, ha-backup}-integration]
description = Run integration tests
pass_env =
    {[testenv]pass_env}
    CI
    CI_PACKED_CHARMS
    S3_ACCESS_KEY
    S3_SECRET_KEY
    S3_BUCKET
    S3_REGION
    S3_SERVER_URL
    S3_CA_BUNDLE_PATH
deps =
    # This applies to libjuju, not Juju.
    juju{env:LIBJUJU_VERSION_SPECIFIER}
    opensearch-py
    pytest
    pytest-asyncio
    pytest-operator
    -r {tox_root}/requirements.txt
commands =
    charm: pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tests_path}/integration/test_charm.py
    tls: pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tests_path}/integration/tls/test_tls.py
    client: pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tests_path}/integration/relations/opensearch_provider/test_opensearch_provider.py
    ha-base: pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tests_path}/integration/ha/test_ha.py
    # h-scaling must run on a machine with more than 2 cores
    h-scaling: pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tests_path}/integration/ha/test_horizontal_scaling.py
    ha-storage: pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tests_path}/integration/ha/test_storage.py
    ha-networking: pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tests_path}/integration/ha/test_ha_networking.py
    ha-multi-clusters: pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tests_path}/integration/ha/test_ha_multi_clusters.py
    large-deployments: pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tests_path}/integration/ha/test_large_deployments.py
    plugins: pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tests_path}/integration/plugins/test_plugins.py
    ha-backup: pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tests_path}/integration/ha/test_backups.py
