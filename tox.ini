# Copyright 2023 Canonical Ltd.
# See LICENSE file for licensing details.

[tox]
no_package = True
env_list = lint, unit

[vars]
src_path = {tox_root}/src
tests_path = {tox_root}/tests
lib_path = {tox_root}/lib/charms/opensearch
all_path = {[vars]src_path} {[vars]tests_path} {[vars]lib_path}

[testenv]
set_env =
    PYTHONPATH = {[vars]src_path}:{tox_root}/lib
    PY_COLORS=1
    LIBJUJU_VERSION_SPECIFIER={env:LIBJUJU_VERSION_SPECIFIER:==3.2.3.0}
allowlist_externals =
    poetry

[testenv:{build,pack-wrapper}]
# Wrap `charmcraft pack`
pass_env =
    CRAFT_SHARED_CACHE
allowlist_externals =
    {[testenv]allowlist_externals}
    charmcraft
    mv
commands_pre =
    poetry export --only main,charm-libs --output requirements.txt
commands =
    build: charmcraft pack {posargs}
commands_post =
    mv requirements.txt requirements-last-build.txt

[testenv:format]
description = Apply coding style standards to code
commands_pre =
    poetry install --only format
commands =
    poetry lock --no-update
    poetry run isort {[vars]all_path}
    poetry run black {[vars]all_path}

[testenv:lint]
description = Check code against coding style standards
allowlist_externals =
    {[testenv]allowlist_externals}
    find
commands_pre =
    poetry install --only lint
commands =
    poetry check --lock
    # uncomment the following line if this charm owns a lib
    # codespell {[vars]lib_path}
    poetry run codespell {[vars]all_path}
    # pflake8 wrapper supports config from pyproject.toml
    poetry run pflake8 {[vars]all_path}
    poetry run isort --check-only --diff {[vars]all_path}
    poetry run black --check --diff {[vars]all_path}
    find {[vars]all_path} -type f \( -name "*.sh" -o -name "*.bash" \) -exec poetry run shellcheck --color=always \{\} +

[testenv:unit]
description = Run unit tests
set_env =
    {[testenv]set_env}
commands_pre =
    poetry install --only main,charm-libs,unit
commands =
    poetry run coverage run --source={[vars]src_path},{[vars]lib_path} \
        -m pytest -v --tb native -s {posargs} {[vars]tests_path}/unit
    poetry run coverage report
    poetry run coverage xml

[testenv:integration]
description = Run integration tests
set_env =
    {[testenv]set_env}
    # Workaround for https://github.com/python-poetry/poetry/issues/6958
    POETRY_INSTALLER_PARALLEL = false
pass_env =
    CI
    GITHUB_OUTPUT
    SECRETS_FROM_GITHUB
allowlist_externals =
    {[testenv:pack-wrapper]allowlist_externals}

    # Set the testing host before starting the lxd cloud
    sudo
    sysctl

commands_pre =
    poetry install --only main,charm-libs,integration

    # Set the testing host before starting the lxd cloud
    sudo sysctl -w vm.max_map_count=262144 vm.swappiness=0 net.ipv4.tcp_retries2=5

    {[testenv:pack-wrapper]commands_pre}
commands =
    poetry run pytest -v --tb native --log-cli-level=INFO -s --ignore={[vars]tests_path}/unit/ {posargs}
commands_post =
    {[testenv:pack-wrapper]commands_post}

[testenv:ha-backup-integration]
description = Run integration tests
pass_env =
    {[testenv]pass_env}
    CI
    CI_PACKED_CHARMS
    # For microceph testing
    S3_ACCESS_KEY
    S3_SECRET_KEY
    S3_BUCKET
    S3_REGION
    S3_SERVER_URL
    S3_CA_BUNDLE_PATH
    # For AWS testing
    AWS_ACCESS_KEY
    AWS_SECRET_KEY
    # For GCP testing
    GCP_ACCESS_KEY
    GCP_SECRET_KEY
    TEST_NUM_APP_UNITS
deps =
    # This applies to libjuju, not Juju.
    juju{env:LIBJUJU_VERSION_SPECIFIER}
    opensearch-py
    pytest
    pytest-asyncio
    pytest-operator
    -r {tox_root}/requirements.txt
commands =
    ha-backup: pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tests_path}/integration/ha/test_backups.py
