# Copyright 2023 Canonical Ltd.
# See LICENSE file for licensing details.

[tool.poetry]
# Charm is not packed as a standard Python package; this information is not used
name = "charm"
version = "0.1.0"
description = ""
authors = []

[tool.poetry.dependencies]
python = "^3.10"
ops = "^2.15"
tenacity = "^8.2.3"
boto3 = "^1.34.135"
overrides = "^7.7.0"
requests = "2.32.3"
# Official name: ruamel.yaml, but due to Poetry GH#109 - replace dots with dashs
ruamel-yaml = "0.18.6"
shortuuid = "1.0.13"
jproperties = "2.1.1"
pydantic = "^1.10.17, <2"
cryptography = "^43.0.0"
jsonschema = "^4.23.0"
poetry-core = "^1.9.0"


[tool.poetry.group.charm-libs.dependencies]
# data_platform_libs/v0/data_interfaces.py
ops = "^2.15"
# data_platform_libs/v0/upgrade.py
# grafana_agent/v0/cos_agent.py requires pydantic <2
pydantic = "^1.10.17, <2"
# tls_certificates_interface/v3/tls_certificates.py
cryptography = "^43.0.0"
jsonschema = "^4.23.0"
# grafana_agent/v0/cos_agent.py
cosl = "^0.0.12"
bcrypt = "^4.1.3"

[tool.poetry.group.format]
optional = true

[tool.poetry.group.format.dependencies]
black = "^24.4.2"
isort = "^5.13.2"

[tool.poetry.group.lint]
optional = true

[tool.poetry.group.lint.dependencies]
black = "^24.4.2"
isort = "^5.13.2"
flake8 = "^7.0.0"
flake8-docstrings = "^1.7.0"
flake8-copyright = "^0.2.4"
flake8-builtins = "^2.5.0"
pyproject-flake8 = "^7.0.0"
pep8-naming = "^0.14.1"
codespell = "^2.3.0"
shellcheck-py = "^0.10.0.1"

[tool.poetry.group.unit.dependencies]
pytest = "^8.2.2"
pytest-asyncio = "^0.21.2"
coverage = {extras = ["toml"], version = "^7.5.1"}
parameterized = "^0.9.0"
responses = "^0.25.3"

[tool.poetry.group.integration.dependencies]
boto3 = "^1.34.135"
pytest = "^8.2.2"
pytest-github-secrets = {git = "https://github.com/canonical/data-platform-workflows", tag = "v16.7.0", subdirectory = "python/pytest_plugins/github_secrets"}
pytest-asyncio = "^0.21.2"
pytest-operator = "^0.35.0"
pytest-operator-cache = {git = "https://github.com/canonical/data-platform-workflows", tag = "v16.7.0", subdirectory = "python/pytest_plugins/pytest_operator_cache"}
pytest-operator-groups = {git = "https://github.com/canonical/data-platform-workflows", tag = "v16.7.0", subdirectory = "python/pytest_plugins/pytest_operator_groups"}
pytest-microceph = {git = "https://github.com/canonical/data-platform-workflows", tag = "v16.7.0", subdirectory = "python/pytest_plugins/microceph"}
# should not be updated unless https://github.com/juju/python-libjuju/issues/1093 is fixed
juju = "~3.5.0"
ops = "^2.15"
tenacity = "^8.4.2"
pyyaml = "^6.0.1"
urllib3 = "^2.2.2"
protobuf = "^5.27.2"
opensearch-py = "^2.6.0"
allure-pytest = "^2.13.5"
allure-pytest-collection-report = {git = "https://github.com/canonical/data-platform-workflows", tag = "v16.7.0", subdirectory = "python/pytest_plugins/allure_pytest_collection_report"}

[tool.coverage.run]
branch = true

[tool.coverage.report]
show_missing = true

[tool.pytest.ini_options]
minversion = "6.0"
log_cli_level = "INFO"
markers = ["unstable"]
asyncio_mode = "auto"

# Formatting tools configuration
[tool.black]
line-length = 99
target-version = ["py310"]

[tool.isort]
profile = "black"

# Linting tools configuration
[tool.flake8]
max-line-length = 99
max-doc-length = 99
max-complexity = 10
exclude = [".git", "__pycache__", ".tox", "build", "dist", "*.egg_info", "venv"]
select = ["E", "W", "F", "C", "N", "R", "D", "H"]
# Ignore W503, E501 because using black creates errors with this
# Ignore D107 Missing docstring in __init__
# Ignore D415 Docstring first line punctuation (doesn't make sense for properties)
# Ignore N818 Exceptions end with "Error" (not all exceptions are errors)
ignore = ["W503", "E501", "D107", "D415", "N818"]
# D100, D101, D102, D103: Ignore missing docstrings in tests
per-file-ignores = ["tests/*:D100,D101,D102,D103,D104"]
docstring-convention = "google"
# Check for properly formatted copyright header in each file
copyright-check = "True"
copyright-author = "Canonical Ltd."
copyright-regexp = "Copyright\\s\\d{4}([-,]\\d{4})*\\s+%(author)s"
